basePath: /
definitions:
  controllers.email:
    properties:
      email:
        type: string
    type: object
  dto.AuthLogin:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.AuthRegister:
    properties:
      confPass:
        type: string
      email:
        type: string
      name:
        type: string
      password:
        type: string
      phoneNumber:
        type: string
    required:
    - confPass
    - email
    - name
    - password
    - phoneNumber
    type: object
  dto.AuthResetPass:
    properties:
      confPass:
        type: string
      email:
        type: string
      newPass:
        type: string
      otp:
        type: string
    type: object
  dto.CustomDate:
    properties:
      time.Time:
        type: string
    type: object
  dto.CustomTime:
    properties:
      time.Time:
        type: string
    type: object
  dto.NewData:
    properties:
      name:
        type: string
    type: object
  dto.NewMovie:
    properties:
      backdrop:
        type: string
      casts:
        type: string
      directors:
        type: string
      genres:
        type: string
      poster:
        type: string
      price:
        type: number
      releaseDate:
        type: string
      runtime:
        type: integer
      synopsis:
        type: string
      title:
        type: string
    type: object
  dto.NewTrx:
    properties:
      cinema:
        type: string
      date:
        type: string
      location:
        type: string
      movieId:
        type: integer
      paymentMethodId:
        type: integer
      seats:
        items:
          type: string
        type: array
      showtime:
        type: string
      totalAmount:
        type: number
    type: object
  dto.ReservedSeatsResponse:
    properties:
      id_showtime:
        type: integer
      seats:
        type: string
    type: object
  dto.SalesPerMovie:
    properties:
      id_movie:
        type: integer
      pricePerTicket:
        type: number
      ticketsSold:
        type: integer
      title:
        type: string
      totalAmount:
        type: number
    type: object
  dto.SubData:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  dto.TransactionHistory:
    properties:
      cinema:
        type: string
      date:
        $ref: '#/definitions/dto.CustomDate'
      location:
        type: string
      movieId:
        type: integer
      movieTitle:
        type: string
      seats:
        type: string
      showtime:
        $ref: '#/definitions/dto.CustomTime'
      showtimeId:
        type: integer
      transactionId:
        type: integer
    type: object
  dto.TrxSuccess:
    properties:
      showtimeId:
        type: integer
      transactionId:
        type: integer
    type: object
  dto.UpdateUserRequest:
    properties:
      confirmPassword:
        type: string
      email:
        type: string
      name:
        type: string
      password:
        minLength: 6
        type: string
      phoneNumber:
        type: string
      profilePicture:
        type: string
    type: object
  dto.UpdateUserResult:
    properties:
      email:
        type: string
      name:
        type: string
      phoneNumber:
        type: string
      profilePicture:
        type: string
    type: object
  utils.Response:
    properties:
      errors: {}
      message:
        type: string
      pageInfo: {}
      results: {}
      success:
        type: boolean
    type: object
  utils.ResponseUser:
    properties:
      email:
        type: string
      name:
        type: string
      phoneNumber:
        type: string
    type: object
info:
  contact: {}
  description: CRUD Swagger
  title: CRUD
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user with email and password, returning a token
      parameters:
      - description: User login credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.AuthLogin'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful with token
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                result:
                  type: string
              type: object
        "400":
          description: Bad request (e.g., user not registered, wrong password, or
            token generation failed)
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                errors:
                  type: string
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                errors:
                  type: string
              type: object
      summary: User login
      tags:
      - Auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Invalidates the user's JWT by adding it to a Redis blacklist with
        expiration based on the token's exp claim
      produces:
      - application/json
      responses:
        "200":
          description: Successful logout
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad request due to missing or invalid token
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                errors:
                  type: string
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                errors:
                  type: string
              type: object
      security:
      - BearerAuth: []
      summary: Logout user
      tags:
      - Auth
  /auth/pass:
    patch:
      consumes:
      - application/json
      description: Reset user password using email, OTP, and new password
      parameters:
      - description: Password reset data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.AuthResetPass'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset successful
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                result:
                  $ref: '#/definitions/utils.ResponseUser'
              type: object
        "400":
          description: Bad request (e.g., invalid OTP, password mismatch, or email
            not registered)
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Reset user password
      tags:
      - Auth
    post:
      consumes:
      - application/json
      description: Send an OTP to the user's email for password reset
      parameters:
      - description: User email
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/controllers.email'
      produces:
      - application/json
      responses:
        "200":
          description: OTP sent successfully
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad request (e.g., email not registered)
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                errors:
                  type: string
              type: object
      summary: Request password reset
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with name, email, phone number, and password
      parameters:
      - description: User registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.AuthRegister'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                result:
                  $ref: '#/definitions/utils.ResponseUser'
              type: object
        "400":
          description: Bad request (e.g., email already used, empty data, or password
            mismatch)
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                errors:
                  type: string
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                errors:
                  type: string
              type: object
      summary: Register a new user
      tags:
      - Auth
  /movies:
    get:
      consumes:
      - application/json
      description: Retrieve movies with optional search by title, genre filter, and
        pagination
      parameters:
      - description: Search by movie title (case-insensitive)
        in: query
        name: search
        type: string
      - description: Filter by genre (case-insensitive)
        in: query
        name: genre
        type: string
      - description: 'Page number for pagination (default: 1)'
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successful response with movies and pagination info
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get movies
      tags:
      - Movies
    post:
      consumes:
      - application/json
      description: Create a new movie with associated genres, directors, and casts
        (admin only)
      parameters:
      - description: Movie data
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/dto.NewMovie'
      produces:
      - application/json
      responses:
        "201":
          description: Movie created successfully
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad request (e.g., empty movie data)
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized access (requires admin role)
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                errors:
                  type: string
              type: object
      security:
      - BearerAuth: []
      summary: Add a new movie
      tags:
      - Movies
  /movies/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a movie by ID, including its associated genres, directors,
        and casts (admin only)
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Movie deleted successfully
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad request (e.g., invalid movie ID)
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized access (requires admin role)
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Delete a movie
      tags:
      - Movies
    get:
      consumes:
      - application/json
      description: Retrieve detailed information about a movie by its ID
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successful response with movie details
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get movie details
      tags:
      - Movies
    put:
      consumes:
      - application/json
      description: Update a movie's details and associated genres, directors, and
        casts (admin only)
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      - description: Movie data
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/dto.NewMovie'
      produces:
      - application/json
      responses:
        "200":
          description: Movie updated successfully
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad request (e.g., invalid input)
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized access (requires admin role)
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                errors:
                  type: string
              type: object
      security:
      - BearerAuth: []
      summary: Update a movie
      tags:
      - Movies
  /movies/casts:
    get:
      consumes:
      - application/json
      description: Retrieve a list of casts with optional search by name (admin only)
      parameters:
      - description: Search by cast name (case-insensitive)
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful response with casts list
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/dto.SubData'
                  type: array
              type: object
        "401":
          description: Unauthorized access (requires admin role)
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get casts
      tags:
      - Movies
    post:
      consumes:
      - application/json
      description: Create a new cast with name (admin only)
      parameters:
      - description: Cast data
        in: body
        name: cast
        required: true
        schema:
          $ref: '#/definitions/dto.NewData'
      produces:
      - application/json
      responses:
        "201":
          description: Cast created successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                result:
                  $ref: '#/definitions/dto.SubData'
              type: object
        "400":
          description: Bad request (e.g., empty cast name)
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                errors:
                  type: string
              type: object
        "401":
          description: Unauthorized access (requires admin role)
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                errors:
                  type: string
              type: object
      security:
      - BearerAuth: []
      summary: Add a new cast
      tags:
      - Movies
  /movies/directors:
    get:
      consumes:
      - application/json
      description: Retrieve a list of directors with optional search by name (admin
        only)
      parameters:
      - description: Search by director name (case-insensitive)
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful response with directors list
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/dto.SubData'
                  type: array
              type: object
        "401":
          description: Unauthorized access (requires admin role)
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get directors
      tags:
      - Movies
    post:
      consumes:
      - application/json
      description: Create a new director with name (admin only)
      parameters:
      - description: Director data
        in: body
        name: director
        required: true
        schema:
          $ref: '#/definitions/dto.NewData'
      produces:
      - application/json
      responses:
        "201":
          description: Director created successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                result:
                  $ref: '#/definitions/dto.SubData'
              type: object
        "400":
          description: Bad request (e.g., empty director name)
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                errors:
                  type: string
              type: object
        "401":
          description: Unauthorized access (requires admin role)
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                errors:
                  type: string
              type: object
      security:
      - BearerAuth: []
      summary: Add a new director
      tags:
      - Movies
  /movies/genres:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all genres (admin only)
      produces:
      - application/json
      responses:
        "200":
          description: Successful response with genres list
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/dto.SubData'
                  type: array
              type: object
        "401":
          description: Unauthorized access (requires admin role)
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get all genres
      tags:
      - Movies
    post:
      consumes:
      - application/json
      description: Create a new genre with name (admin only)
      parameters:
      - description: Genre data
        in: body
        name: genre
        required: true
        schema:
          $ref: '#/definitions/dto.NewData'
      produces:
      - application/json
      responses:
        "201":
          description: Genre created successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                result:
                  $ref: '#/definitions/dto.SubData'
              type: object
        "400":
          description: Bad request (e.g., empty genre name)
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                errors:
                  type: string
              type: object
        "401":
          description: Unauthorized access (requires admin role)
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                errors:
                  type: string
              type: object
      security:
      - BearerAuth: []
      summary: Add a new genre
      tags:
      - Movies
  /movies/upcoming:
    get:
      consumes:
      - application/json
      description: Retrieve a list of upcoming movies
      produces:
      - application/json
      responses:
        "200":
          description: Successful response with upcoming movies
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get upcoming movies
      tags:
      - Movies
  /profile:
    get:
      consumes:
      - application/json
      description: Retrieve user profile data
      produces:
      - application/json
      responses:
        "200":
          description: Successful response with user profile data
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/dto.UpdateUserResult'
                  type: array
              type: object
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get profile user
      tags:
      - User
    patch:
      consumes:
      - application/json
      description: Updates user credentials (email, password) and/or profile (name,
        phone number, profile picture)
      parameters:
      - description: User update data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User data updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                result:
                  $ref: '#/definitions/dto.UpdateUserResult'
              type: object
        "400":
          description: Bad request (e.g., invalid input, email/phone already used,
            password mismatch)
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                errors:
                  type: string
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                errors:
                  type: string
              type: object
      security:
      - BearerAuth: []
      summary: Update user data
      tags:
      - User
  /transactions:
    get:
      consumes:
      - application/json
      description: Retrieve a list of user's transactions
      produces:
      - application/json
      responses:
        "200":
          description: Successful response with transactions history list
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/dto.TransactionHistory'
                  type: array
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get transactions history
      tags:
      - Transactions
    post:
      consumes:
      - application/json
      description: Creates a transaction for booking movie tickets, including checking
        or creating a showtime and reserving seats (user only)
      parameters:
      - description: Transaction data
        in: body
        name: newTrx
        required: true
        schema:
          $ref: '#/definitions/dto.NewTrx'
      produces:
      - application/json
      responses:
        "201":
          description: Transaction created successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                result:
                  $ref: '#/definitions/dto.TrxSuccess'
              type: object
        "400":
          description: Bad request due to invalid input
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                errors:
                  type: string
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Create a new transaction
      tags:
      - Transactions
  /transactions/payment-methods:
    get:
      consumes:
      - application/json
      description: Retrieve a list of payment method
      produces:
      - application/json
      responses:
        "200":
          description: Successful response with payment methods list
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/dto.SubData'
                  type: array
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get payment method
      tags:
      - Transactions
    post:
      consumes:
      - application/json
      description: Create a new payment method (admin only)
      parameters:
      - description: New payment method data
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/dto.NewData'
      produces:
      - application/json
      responses:
        "201":
          description: Payment method created successfully
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad request (e.g., empty payment method data)
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized access (requires admin role)
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                errors:
                  type: string
              type: object
      security:
      - BearerAuth: []
      summary: Add a new payment method
      tags:
      - Transactions
  /transactions/sales:
    get:
      consumes:
      - application/json
      description: Retrieves aggregated sales data for each movie, accessible only
        to admin users
      produces:
      - application/json
      responses:
        "201":
          description: Successful response with sales data per movie
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/dto.SalesPerMovie'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get sales data per movie
      tags:
      - Transactions
  /transactions/seats:
    get:
      consumes:
      - application/json
      description: Retrieves a list of reserved seats for a specific showtime identified
        by movie ID, cinema, location, date, and showtime
      parameters:
      - description: Movie ID
        in: query
        name: id_movie
        required: true
        type: integer
      - description: Cinema name
        in: query
        name: cinema
        required: true
        type: string
      - description: Cinema location
        in: query
        name: location
        required: true
        type: string
      - description: Showtime date (YYYY-MM-DD)
        in: query
        name: date
        required: true
        type: string
      - description: Showtime (HH:MM:SS)
        in: query
        name: showtime
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful response with reserved seats
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                result:
                  $ref: '#/definitions/dto.ReservedSeatsResponse'
              type: object
        "400":
          description: Bad request due to invalid input
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                errors:
                  type: string
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                errors:
                  type: string
              type: object
      security:
      - BearerAuth: []
      summary: Get reserved seats
      tags:
      - Transactions
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
